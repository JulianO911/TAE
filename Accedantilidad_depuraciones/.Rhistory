}
for (n in 1:51) {
grid.lines(x = c(n + 1.5, n + 1.5),
y = c(-0.5, 6.5), default.units = "native", gp=gpar(col = "grey", lwd = 1))
}
x.start <- adj.start - 0.5
if (y.start > 0) {
grid.lines(x = c(x.start, x.start + 1),
y = c(y.start - 0.5, y.start -  0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start + 1, x.start + 1),
y = c(y.start - 0.5 , -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.start),
y = c(y.start - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
if (y.end < 6  ) {
grid.lines(x = c(x.start + 1, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
} else {
grid.lines(x = c(x.start, x.start),
y = c( - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
if (y.start == 0 ) {
if (y.end < 6  ) {
grid.lines(x = c(x.start, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
}
for (j in 1:12)  {
last.month <- max(dates.fsubs$seq[dates.fsubs$month == j])
x.last.m <- dates.fsubs$woty[last.month] + 0.5
y.last.m <- dates.fsubs$dotw[last.month] + 0.5
grid.lines(x = c(x.last.m, x.last.m), y = c(-0.5, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
if ((y.last.m) < 6) {
grid.lines(x = c(x.last.m, x.last.m - 1), y = c(y.last.m, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.last.m - 1, x.last.m - 1), y = c(y.last.m, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.last.m, x.last.m), y = c(- 0.5, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
}
}
}
}
trellis.unfocus()
}
lattice.options(default.theme = def.theme)
}
calendarHeat(accidentes$FECHA)
?calendarHeat
calendarHeatMap <- function(dates,
values,
ncolors=99,
color="r2g",
varname="Values",
date.form = "%Y-%m-%d", ...) {
require(lattice)
require(grid)
require(chron)
if (class(dates) == "character" | class(dates) == "factor" ) {
dates <- strptime(dates, date.form)
}
caldat <- data.frame(value = values, dates = dates)
min.date <- as.Date(paste(format(min(dates), "%Y"),
"-1-1",sep = ""))
max.date <- as.Date(paste(format(max(dates), "%Y"),
"-12-31", sep = ""))
dates.f <- data.frame(date.seq = seq(min.date, max.date, by="days"))
# Merge moves data by one day, avoid
caldat <- data.frame(date.seq = seq(min.date, max.date, by="days"), value = NA)
dates <- as.Date(dates)
caldat$value[match(dates, caldat$date.seq)] <- values
caldat$dotw <- as.numeric(format(caldat$date.seq, "%w"))
caldat$woty <- as.numeric(format(caldat$date.seq, "%U")) + 1
caldat$yr <- as.factor(format(caldat$date.seq, "%Y"))
caldat$month <- as.numeric(format(caldat$date.seq, "%m"))
yrs <- as.character(unique(caldat$yr))
d.loc <- as.numeric()
for (m in min(yrs):max(yrs)) {
d.subset <- which(caldat$yr == m)
sub.seq <- seq(1,length(d.subset))
d.loc <- c(d.loc, sub.seq)
}
caldat <- cbind(caldat, seq=d.loc)
#color styles
r2b <- c("#0571B0", "#92C5DE", "#F7F7F7", "#F4A582", "#CA0020") #red to blue
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")   #red to green
w2b <- c("#045A8D", "#2B8CBE", "#74A9CF", "#BDC9E1", "#F1EEF6")   #white to blue
g2r <- c("#B5E384", "#FFFFBD", "#FFAE63", "#D61818") #green to red
assign("col.sty", get(color))
calendar.pal <- colorRampPalette((col.sty), space = "Lab")
def.theme <- lattice.getOption("default.theme")
cal.theme <-
function() {
theme <-
list(
strip.background = list(col = "transparent"),
strip.border = list(col = "transparent"),
axis.line = list(col="transparent"),
par.strip.text=list(cex=0.8))
}
lattice.options(default.theme = cal.theme)
yrs <- (unique(caldat$yr))
nyr <- length(yrs)
print(cal.plot <- levelplot(value~woty*dotw | yr, data=caldat,
as.table=TRUE,
aspect=.12,
layout = c(1, nyr%%7),
between = list(x=0, y=c(1,1)),
strip=TRUE,
main = paste("Calendar Heat Map of ", varname, sep = ""),
scales = list(
x = list(
at= c(seq(2.9, 52, by=4.42)),
labels = month.abb,
alternating = c(1, rep(0, (nyr-1))),
tck=0,
cex = 0.7),
y=list(
at = c(0, 1, 2, 3, 4, 5, 6),
labels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday"),
alternating = 1,
cex = 0.6,
tck=0)),
xlim =c(0.4, 54.6),
ylim=c(6.6,-0.6),
cuts= ncolors - 1,
col.regions = (calendar.pal(ncolors)),
xlab="" ,
ylab="",
colorkey= list(col = calendar.pal(ncolors), width = 0.6, height = 0.5),
subscripts=TRUE
) )
panel.locs <- trellis.currentLayout()
for (row in 1:nrow(panel.locs)) {
for (column in 1:ncol(panel.locs))  {
if (panel.locs[row, column] > 0)
{
trellis.focus("panel", row = row, column = column,
highlight = FALSE)
xyetc <- trellis.panelArgs()
subs <- caldat[xyetc$subscripts,]
dates.fsubs <- caldat[caldat$yr == unique(subs$yr),]
y.start <- dates.fsubs$dotw[1]
y.end   <- dates.fsubs$dotw[nrow(dates.fsubs)]
dates.len <- nrow(dates.fsubs)
adj.start <- dates.fsubs$woty[1]
for (k in 0:6) {
if (k < y.start) {
x.start <- adj.start + 0.5
} else {
x.start <- adj.start - 0.5
}
if (k > y.end) {
x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] - 0.5
} else {
x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] + 0.5
}
grid.lines(x = c(x.start, x.finis), y = c(k -0.5, k - 0.5),
default.units = "native", gp=gpar(col = "grey", lwd = 1))
}
if (adj.start <  2) {
grid.lines(x = c( 0.5,  0.5), y = c(6.5, y.start-0.5),
default.units = "native", gp=gpar(col = "grey", lwd = 1))
grid.lines(x = c(1.5, 1.5), y = c(6.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
grid.lines(x = c(x.finis, x.finis),
y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
if (dates.fsubs$dotw[dates.len] != 6) {
grid.lines(x = c(x.finis + 1, x.finis + 1),
y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
}
grid.lines(x = c(x.finis, x.finis),
y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
}
for (n in 1:51) {
grid.lines(x = c(n + 1.5, n + 1.5),
y = c(-0.5, 6.5), default.units = "native", gp=gpar(col = "grey", lwd = 1))
}
x.start <- adj.start - 0.5
if (y.start > 0) {
grid.lines(x = c(x.start, x.start + 1),
y = c(y.start - 0.5, y.start -  0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start + 1, x.start + 1),
y = c(y.start - 0.5 , -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.start),
y = c(y.start - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
if (y.end < 6  ) {
grid.lines(x = c(x.start + 1, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
} else {
grid.lines(x = c(x.start, x.start),
y = c( - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
if (y.start == 0 ) {
if (y.end < 6  ) {
grid.lines(x = c(x.start, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
}
for (j in 1:12)  {
last.month <- max(dates.fsubs$seq[dates.fsubs$month == j])
x.last.m <- dates.fsubs$woty[last.month] + 0.5
y.last.m <- dates.fsubs$dotw[last.month] + 0.5
grid.lines(x = c(x.last.m, x.last.m), y = c(-0.5, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
if ((y.last.m) < 6) {
grid.lines(x = c(x.last.m, x.last.m - 1), y = c(y.last.m, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.last.m - 1, x.last.m - 1), y = c(y.last.m, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.last.m, x.last.m), y = c(- 0.5, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
}
}
}
}
trellis.unfocus()
}
lattice.options(default.theme = def.theme)
}
calendarHeatMap(accidentes$FECHA, count(accidentes$FECHA), varname = "jaja")
calendarHeatMap(accidentes$FECHA, sum(accidentes$FECHA), varname = "jaja")
ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
labs(x = "Fecha de reporte en la web", y = "Frecuencia de contagios de COVID-19") +
ggtitle("Frecuencia de la fecha de reporte web") +
ylim(c(0,1000)) +
annotate("text", x = as.Date("2021-01-10"), y = 1000, label = "Periodo uno") +
annotate("text", x = as.Date("2021-06-25"), y = 1000, label = "Periodo dos")
ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
ggplot(data = accidentes) +
geom_line(aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
ggplot(data = accidentes) +aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
plotly(g4)
g4 <- ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
plotly(g4)
ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
#plotly(g4)
g5 <- ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
#plotly(g4)
g5
g5 <- ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
plotly(g5)
g6 <-ggplot(data = accidentes) +
geom_bar(mapping = aes(x = MES)) +
ggtitle("Tipo de infraestructa en la que se dio el incidente",
subtitle = "Frecuencia del tipo de infraestructura en el que sucedieron en los incidentes de tránsito\nen la ciudad de Medellín, Antioquia entre los años 2014 y 2020") +
xlab("Tipo de infraestructura") +
ylab("Frecuencia absoluta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggplotly(g6)
g6 <-ggplot(data = accidentes) +
geom_bar(mapping = aes(x = MES)) +
ggtitle("Tipo de infraestructa en la que se dio el incidente",
subtitle = "Frecuencia del tipo de infraestructura en el que sucedieron en los incidentes de tránsito\nen la ciudad de Medellín, Antioquia entre los años 2014 y 2020") +
xlab("Tipo de infraestructura") +
ylab("Frecuencia absoluta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggplotly(g6)
g5 <- ggplot(data = accidentes, aes(x = as.Date(FECHA,
format = "%Y-%m-%d"))) +
stat_count() +
theme_minimal()
ggplotly(g5)
g3 <-ggplot(data = accidentes) +
geom_bar(mapping = aes(x = DISEÑO)) +
ggtitle("Tipo de infraestructa en la que se dio el incidente",
subtitle = "Frecuencia del tipo de infraestructura en el que sucedieron en los incidentes de tránsito\nen la ciudad de Medellín, Antioquia entre los años 2014 y 2020") +
xlab("Tipo de infraestructura") +
ylab("Frecuencia absoluta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggplotly(g3)
datatable(freq(accidentes$MES))
datatable(freq(accidentes$MES))
g7 <-ggplot(data = accidentes) +
geom_bar(mapping = aes(x = COMUNA)) +
ggtitle("Tipo de infraestructa en la que se dio el incidente",
subtitle = "Frecuencia del tipo de infraestructura en el que sucedieron en los incidentes de tránsito\nen la ciudad de Medellín, Antioquia entre los años 2014 y 2020") +
xlab("Tipo de infraestructura") +
ylab("Frecuencia absoluta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggplotly(g7)
datatable(freq(accidentes$BARRIO))
g6 <-ggplot(data = accidentes) +
geom_bar(mapping = aes(x = MES)) +
ggtitle("Tipo de infraestructa en la que se dio el incidente",
subtitle = "Frecuencia del tipo de infraestructura en el que sucedieron en los incidentes de tránsito\nen la ciudad de Medellín, Antioquia entre los años 2014 y 2020") +
xlab("Tipo de infraestructura") +
ylab("Frecuencia absoluta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggplotly(g6)
View(accidentes)
View(accidentes)
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
library("kableExtra")
incidentes <- read.csv("incidentes_viales.csv", header = TRUE, sep = ";", dec = ".", encoding = "UTF-8")
estructura <- glimpse(incidentes)
accidentes <- incidentes %>%
rename(GRAVEDAD = MES,
MES = NRO_RADICADO,
NRO_RADICADO = NUMCOMUNA,
NUMCOMUNA = BARRIO,
BARRIO = COMUNA,
COMUNA = LOCATION,
LOCATION = X,
UNKNOWN = Y)
glimpse(accidentes)
# Eliminación de los 0z
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = substring(FECHA_ACCIDENTES, 1, nchar(FECHA_ACCIDENTES)-5))
# Cambio de las T por un espacio
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = gsub("T", " ", FECHA_ACCIDENTES))
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = as.POSIXct(FECHA_ACCIDENTES))
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTE = as.POSIXct(FECHA_ACCIDENTE, format = "%d/%m/%Y %H:%M:%S"))
accidentes <- accidentes %>%
mutate(AÑO = as.factor(AÑO))
levels(accidentes$AÑO)
levels(accidentes$AÑO)[levels(accidentes$AÑO) == "2019\\r"] <- "2019"
levels(accidentes$CLASE_ACCIDENTE)
accidentes <- accidentes %>%
mutate(CLASE_ACCIDENTE = as.factor(CLASE_ACCIDENTE))
levels(accidentes$CLASE_ACCIDENTE)
table(accidentes$CLASE_ACCIDENTE)
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
library("kableExtra")
incidentes <- read.csv("incidentes_viales.csv", header = TRUE, sep = ";", dec = ".", encoding = "UTF-8")
estructura <- glimpse(incidentes)
accidentes <- incidentes %>%
rename(GRAVEDAD = MES,
MES = NRO_RADICADO,
NRO_RADICADO = NUMCOMUNA,
NUMCOMUNA = BARRIO,
BARRIO = COMUNA,
COMUNA = LOCATION,
LOCATION = X,
UNKNOWN = Y)
glimpse(accidentes)
# Eliminación de los 0z
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = substring(FECHA_ACCIDENTES, 1, nchar(FECHA_ACCIDENTES)-5))
# Cambio de las T por un espacio
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = gsub("T", " ", FECHA_ACCIDENTES))
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = as.POSIXct(FECHA_ACCIDENTES))
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTE = as.POSIXct(FECHA_ACCIDENTE, format = "%d/%m/%Y %H:%M:%S"))
accidentes <- accidentes %>%
mutate(AÑO = as.factor(AÑO))
levels(accidentes$AÑO)
levels(accidentes$AÑO)[levels(accidentes$AÑO) == "2019\\r"] <- "2019"
accidentes <- accidentes %>%
mutate(CLASE_ACCIDENTE = as.factor(CLASE_ACCIDENTE)) %>%
mutate(CLASE_ACCIDENTE = recode(CLASE_ACCIDENTE,
"Caída Ocupante" = "Caída del ocupante",
"Caida de Ocupante" = "Caída del ocupante",
"Caída de Ocupante" = "Caída del ocupante",
"Caida Ocupante" = "Caída del ocupante"))
levels(accidentes$CLASE_ACCIDENTE)[levels(accidentes$CLASE_ACCIDENTE) == ""] <- "Desconocido"
levels(accidentes$CLASE_ACCIDENTE)
accidentes <- accidentes %>%
mutate(DIRECCION = str_trim(DIRECCION))
unicos_dir <- length(unique(accidentes$DIRECCION))
accidentes <- accidentes %>%
mutate(DIRECCION.ENCASILLADA = str_trim(DIRECCION.ENCASILLADA))
unicos_dir.enc <- length(unique(accidentes$DIRECCION.ENCASILLADA))
accidentes <- accidentes %>%
mutate(DISEÑO = as.factor(DISEÑO))
levels(accidentes$DISEÑO)
accidentes <- accidentes %>%
mutate(DISEÑO = recode(DISEÑO,
"Ciclo Ruta" = "Ciclorruta",
"Interseccion" = "Intersección",
"Lote o Predio" = "Lote o predio",
"Paso a Nivel" = "Paso a nivel",
"Paso Elevado" = "Paso elevado",
"Paso Inferior" = "Paso inferior",
"Tramo de via" = "Tramo de vía",
"Tunel" = "Túnel",
"Via peatonal" = "Vía peatonal"))
levels(accidentes$DISEÑO)[levels(accidentes$DISEÑO) == ""] <- "Desconocido"
levels(accidentes$DISEÑO)[levels(accidentes$DISEÑO) == "Pont\\xF3n"] <- "Pontón"
unicos_exp <- length(unique(accidentes$EXPEDIENTE))
repetidos_exp <- accidentes %>%
group_by(EXPEDIENTE) %>%
filter(n() > 1)
View(repetidos_exp)
View(repetidos_exp)
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
library("kableExtra")
incidentes <- read.csv("incidentes_viales.csv", header = TRUE, sep = ";", dec = ".", encoding = "UTF-8")
estructura <- glimpse(incidentes)
accidentes <- incidentes %>%
rename(GRAVEDAD = MES,
MES = NRO_RADICADO,
NRO_RADICADO = NUMCOMUNA,
NUMCOMUNA = BARRIO,
BARRIO = COMUNA,
COMUNA = LOCATION,
LOCATION = X,
UNKNOWN = Y)
glimpse(accidentes)
# Eliminación de los 0z
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = substring(FECHA_ACCIDENTES, 1, nchar(FECHA_ACCIDENTES)-5))
# Cambio de las T por un espacio
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = gsub("T", " ", FECHA_ACCIDENTES))
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTES = as.POSIXct(FECHA_ACCIDENTES))
accidentes <- accidentes %>%
mutate(FECHA_ACCIDENTE = as.POSIXct(FECHA_ACCIDENTE, format = "%d/%m/%Y %H:%M:%S"))
View(accidentes)
View(accidentes)
accidentes <- accidentes %>%
mutate(AÑO = as.factor(AÑO))
levels(accidentes$AÑO)
